// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateProductRequest defines model for CreateProductRequest.
type CreateProductRequest struct {
	Category    string  `json:"category"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Price       float64 `json:"price"`
	Stock       *int32  `json:"stock,omitempty"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Email openapi_types.Email `json:"email"`
	Name  string              `json:"name"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Status    string    `json:"status"`
	Timestamp time.Time `json:"timestamp"`
}

// Product defines model for Product.
type Product struct {
	Category    string             `json:"category"`
	CreatedAt   time.Time          `json:"createdAt"`
	Description *string            `json:"description,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
	Price       float64            `json:"price"`
	Stock       *int32             `json:"stock,omitempty"`
	UpdatedAt   *time.Time         `json:"updatedAt,omitempty"`
}

// UpdateProductRequest defines model for UpdateProductRequest.
type UpdateProductRequest struct {
	Category    *string  `json:"category,omitempty"`
	Description *string  `json:"description,omitempty"`
	Name        *string  `json:"name,omitempty"`
	Price       *float64 `json:"price,omitempty"`
	Stock       *int32   `json:"stock,omitempty"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	Email *openapi_types.Email `json:"email,omitempty"`
	Name  *string              `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time           `json:"createdAt"`
	Email     openapi_types.Email `json:"email"`
	Id        openapi_types.UUID  `json:"id"`
	Name      string              `json:"name"`
	UpdatedAt *time.Time          `json:"updatedAt,omitempty"`
}

// ListProductsParams defines parameters for ListProducts.
type ListProductsParams struct {
	// Category Filter products by category
	Category *string `form:"category,omitempty" json:"category,omitempty"`

	// Limit Maximum number of products to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateProductJSONBody defines parameters for CreateProduct.
type CreateProductJSONBody struct {
	Category    string  `json:"category"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Price       float64 `json:"price"`
	Stock       *int32  `json:"stock,omitempty"`
}

// UpdateProductJSONBody defines parameters for UpdateProduct.
type UpdateProductJSONBody struct {
	Category    *string  `json:"category,omitempty"`
	Description *string  `json:"description,omitempty"`
	Name        *string  `json:"name,omitempty"`
	Price       *float64 `json:"price,omitempty"`
	Stock       *int32   `json:"stock,omitempty"`
}

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	// Limit Maximum number of users to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	Email openapi_types.Email `json:"email"`
	Name  string              `json:"name"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	Email *openapi_types.Email `json:"email,omitempty"`
	Name  *string              `json:"name,omitempty"`
}

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody CreateProductJSONBody

// UpdateProductJSONRequestBody defines body for UpdateProduct for application/json ContentType.
type UpdateProductJSONRequestBody UpdateProductJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check endpoint
	// (GET /health)
	GetHealth(c *gin.Context)
	// List all products
	// (GET /products)
	ListProducts(c *gin.Context, params ListProductsParams)
	// Create a new product
	// (POST /products)
	CreateProduct(c *gin.Context)
	// Delete a product
	// (DELETE /products/{productId})
	DeleteProduct(c *gin.Context, productId openapi_types.UUID)
	// Get a product by ID
	// (GET /products/{productId})
	GetProductById(c *gin.Context, productId openapi_types.UUID)
	// Update a product
	// (PUT /products/{productId})
	UpdateProduct(c *gin.Context, productId openapi_types.UUID)
	// List all users
	// (GET /users)
	ListUsers(c *gin.Context, params ListUsersParams)
	// Create a new user
	// (POST /users)
	CreateUser(c *gin.Context)
	// Delete a user
	// (DELETE /users/{userId})
	DeleteUser(c *gin.Context, userId openapi_types.UUID)
	// Get a user by ID
	// (GET /users/{userId})
	GetUserById(c *gin.Context, userId openapi_types.UUID)
	// Update a user
	// (PUT /users/{userId})
	UpdateUser(c *gin.Context, userId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// ListProducts operation middleware
func (siw *ServerInterfaceWrapper) ListProducts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProductsParams

	// ------------- Optional query parameter "category" -------------

	err = runtime.BindQueryParameter("form", true, false, "category", c.Request.URL.Query(), &params.Category)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListProducts(c, params)
}

// CreateProduct operation middleware
func (siw *ServerInterfaceWrapper) CreateProduct(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProduct(c)
}

// DeleteProduct operation middleware
func (siw *ServerInterfaceWrapper) DeleteProduct(c *gin.Context) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "productId", c.Param("productId"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProduct(c, productId)
}

// GetProductById operation middleware
func (siw *ServerInterfaceWrapper) GetProductById(c *gin.Context) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "productId", c.Param("productId"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductById(c, productId)
}

// UpdateProduct operation middleware
func (siw *ServerInterfaceWrapper) UpdateProduct(c *gin.Context) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "productId", c.Param("productId"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateProduct(c, productId)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUsers(c, params)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, userId)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserById(c, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.GET(options.BaseURL+"/products", wrapper.ListProducts)
	router.POST(options.BaseURL+"/products", wrapper.CreateProduct)
	router.DELETE(options.BaseURL+"/products/:productId", wrapper.DeleteProduct)
	router.GET(options.BaseURL+"/products/:productId", wrapper.GetProductById)
	router.PUT(options.BaseURL+"/products/:productId", wrapper.UpdateProduct)
	router.GET(options.BaseURL+"/users", wrapper.ListUsers)
	router.POST(options.BaseURL+"/users", wrapper.CreateUser)
	router.DELETE(options.BaseURL+"/users/:userId", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/users/:userId", wrapper.GetUserById)
	router.PUT(options.BaseURL+"/users/:userId", wrapper.UpdateUser)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW2/jNhP9KwS/79EbKZcCC73tNts0wBYItshTERSMNLa5kUiFHHpjBP7vBUnJki3K",
	"l27iC+qnyBLJGc6cOTMnrzSVRSkFCNQ0eaU6HUPB3OOvChjCnZKZSfEbPBvQaN+XSpagkINblTKEkVRT",
	"+1ywl68gRjimyXkcD2jBxfz3gOK0BJpQjYqLEZ0NaAY6VbxELkV3dxzYIFgBSysvNrBTKp66fUOpCoY0",
	"oZk0jzlQt5MXpqBJY06Y4hGU3adRpk92XwZDZnJ0q+ZncIGXF+EjuEAY2TNmA6rg2XAFGU3+8v7X/gya",
	"0D3Md8rH75CiNe6jf69B9YYeCsbzhXv5N5tFbn2GlryvD3dnhVz+opRUAYTIzNnuOFWA1mwU+rZk2Z3Q",
	"rA/Z/h1YjuNvoEspNHSd0MjQ+Ki9sKLM3e6nUKiQF6CRFeUiYhjCB/uJrgtTZal9UMjhqq5WF1THudSh",
	"IvuEmzrXqbLOd54tnGUMz1Yh6ICqa0BNmW0XjqVcuav2VWU72qEM3jvjJ3583ZoTe0K5b7LruqUhxGfb",
	"1+AWzv9sOb5JSSxQ/bo6qEaGv0/zwj7nhcUsHNXcULu+z/mh9uHo5oja8dM8cezzRJ3J01zxZnPFYkgP",
	"br6Yu3eaM9bOGXY/F0PpK7wFYPrFEzH5dHdLjOZiRCQr+QdL+iMQ5AfHMbnhwjEpOsJu7aADOgGl/Unn",
	"Z/FZbC8nSxCs5DShl2fx2aWtZoZjl5Vo7DqEfRyBu7zNGbO+3GY0oTeAvodQe1/fRtzGizj23UwgCLeR",
	"lWXOU7c1+q59MXpI2Kf/KxjShP4vav5BE1WAiXq6lQvSYnD+BDXhKRCuiXd86jKhTVEwSx6VcCbpGNIn",
	"AiIrJRdoY8VG2uapuu6D3RWVnpR07+2/co139SIbNcUKQFD2qOW8/cZzBEXqM8njlLS4ktslzwbcD4/C",
	"NpU2cerAbNnOH+zFkgbxBEPksDGJkihAo0SPwZwXHBeszZvLRbC7eFMNH1S/Amz18JPw4AiF3hQn9XDQ",
	"kBBTik1DgLEZbMfI7vnlHaDrh72AA7cCQQmWEw1qAopAtbANWucky/PGywaw81cPtgVJHUDpglKhnpdA",
	"42eZTd/8nkFVNFtkQ1QGZh08nL+5L3MYdKNefSIVBRNt0hS0Hpo8n1oIXO0WAhOW84xwURo8SAD6rBJG",
	"BPyoQRjGYJs2o9fq6TabeTLJAaGLz2v3vsHnShqtM3d7XZOY7VUNh81N0mXItXltzSAQoKurbieuXfH3",
	"CoHoandprJ0REslQGpEdJJB8qglbDaJB76xR3fLz1OX3IIES74PHMkDGc31CXRB1N4AN5Ozg5TAR7qAm",
	"ALwFiXpAuHu/Nh4U5Ru18b3Av1JnB9bGT5XYqUSPq3X8b4cIo115rRBe927FmmrsqiF38H9GCrn/tWyh",
	"g3zYD1oEmSrvNXD873XyxwViF9qn/W+3PQkfn/RumO37k+T5F5LHePAsI27OU9Gr/bORzKlwuJK0XJ76",
	"5gdv6f3VjXPiIKSN8+RIdE0PUvoVjb3cJnJm95iId8tL+5IwR4Aur19skjvipdX8+pXLwXDOewuWrXvv",
	"jjF+0inHUG5zkdLX9u1qtz1USNcwgVyWBQisjNABNSqnCR0jlkkU5TJl+VhqTD7GH+OIlTyanNPZw+yf",
	"AAAA//8DV3R0niwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
