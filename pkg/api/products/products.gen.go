// Package products provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package products

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "oapi-codegen-layout/pkg/api/models"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateProductRequest defines model for CreateProductRequest.
type CreateProductRequest struct {
	Category    string  `json:"category"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Price       float64 `json:"price"`
	Stock       *int32  `json:"stock,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// Product defines model for Product.
type Product struct {
	Category    string             `json:"category"`
	CreatedAt   time.Time          `json:"createdAt"`
	Description *string            `json:"description,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
	Price       float64            `json:"price"`
	Stock       *int32             `json:"stock,omitempty"`
	UpdatedAt   *time.Time         `json:"updatedAt,omitempty"`
}

// UpdateProductRequest defines model for UpdateProductRequest.
type UpdateProductRequest struct {
	Category    *string  `json:"category,omitempty"`
	Description *string  `json:"description,omitempty"`
	Name        *string  `json:"name,omitempty"`
	Price       *float64 `json:"price,omitempty"`
	Stock       *int32   `json:"stock,omitempty"`
}

// ListProductsParams defines parameters for ListProducts.
type ListProductsParams struct {
	// Category Filter products by category
	Category *string `form:"category,omitempty" json:"category,omitempty"`

	// Limit Maximum number of products to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody = CreateProductRequest

// UpdateProductJSONRequestBody defines body for UpdateProduct for application/json ContentType.
type UpdateProductJSONRequestBody = UpdateProductRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all products
	// (GET /products)
	ListProducts(c *gin.Context, params ListProductsParams)
	// Create a new product
	// (POST /products)
	CreateProduct(c *gin.Context)
	// Delete a product
	// (DELETE /products/{productId})
	DeleteProduct(c *gin.Context, productId openapi_types.UUID)
	// Get a product by ID
	// (GET /products/{productId})
	GetProductById(c *gin.Context, productId openapi_types.UUID)
	// Update a product
	// (PUT /products/{productId})
	UpdateProduct(c *gin.Context, productId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListProducts operation middleware
func (siw *ServerInterfaceWrapper) ListProducts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProductsParams

	// ------------- Optional query parameter "category" -------------

	err = runtime.BindQueryParameter("form", true, false, "category", c.Request.URL.Query(), &params.Category)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListProducts(c, params)
}

// CreateProduct operation middleware
func (siw *ServerInterfaceWrapper) CreateProduct(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProduct(c)
}

// DeleteProduct operation middleware
func (siw *ServerInterfaceWrapper) DeleteProduct(c *gin.Context) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "productId", c.Param("productId"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProduct(c, productId)
}

// GetProductById operation middleware
func (siw *ServerInterfaceWrapper) GetProductById(c *gin.Context) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "productId", c.Param("productId"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductById(c, productId)
}

// UpdateProduct operation middleware
func (siw *ServerInterfaceWrapper) UpdateProduct(c *gin.Context) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "productId", c.Param("productId"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter productId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateProduct(c, productId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/products", wrapper.ListProducts)
	router.POST(options.BaseURL+"/products", wrapper.CreateProduct)
	router.DELETE(options.BaseURL+"/products/:productId", wrapper.DeleteProduct)
	router.GET(options.BaseURL+"/products/:productId", wrapper.GetProductById)
	router.PUT(options.BaseURL+"/products/:productId", wrapper.UpdateProduct)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/cNhD9K8K0R9WSHRcIdEvqNlggBYICPQU+0OLsLlN+mRxuszD2vxckpdV+0OsY",
	"cI09+CZRM5zhvDdvqAfojbJGoyYP3QP4fomKpcffHDLCL87w0NNfeB/QU1y3zlh0JDBZ9YxwYdw6Piv2",
	"/TPqBS2hu2zbGpTQ2/caaG0ROvDkhF7ApgaOvnfCkjD62LstOGim8MDy6gfiWCf65Dc3TjGCDrgJdxIh",
	"eQoVFHRTOB3UHbro58n0/0Q/jnMWJCWr7R5C07ur8hZCEy7iHpsaHN4H4ZBD9zXnP+ZTT6W73Xqau2/Y",
	"Uwz+u3PGFcpteDrK0SEVes8WpW8HSaQdJvtS7AHz02AfZdAnvvAPtF9qRvgLiXTwpxhw9F3wvb1CEBxO",
	"8OKMkK8hWP68chzglI76GGN2q11C8O8U/K13H57drweljEtCz00mw86ZxyapFNNsgQo1Vai5NSIqaQ0k",
	"SOJk5qsPX2ZQwwqdz/6XF+1FG1M1FjWzAjp4d9FevItwM1omgBo7eMeXBSYII4As5jDj0MFn4WkMkTwd",
	"U0joPHRfDzP+Q0hCV417VnfraodQIprcB0wvGa1dvuXBUJSXwzh/su+xwlVGozLzKSSZyiEFpx8JKIUS",
	"tBdt24FXxRbMoSbODm8FaG9je3lrtM/kv2rbLKiaUKfKMmul6FNtm28+E3tKRBCq5Pizwzl08FMzTc5m",
	"GJvNqJwTkZhzbJ15tF+liNxubaLPr8/M6VQqeYAUAs80odNMVh7dCl2Fg2ENPijFohzk5JiUU3Y1EFtE",
	"VsF26Tb2p/EFVu5dHSDrGnr6aPj6xc5XvJ5s9lWUXMDNEe6XL5bDFu7jKo/yMOh05UPfo/fzIOU6Qn39",
	"OlCvmBS8EtoGOiuCZfQqVmn8dyRZmWObepLB5mF4mvFNFgeJhMf8u0nrE/9OyuKI1OxmFKWov5MmbUPC",
	"IbV2deqJS0pBfq4fnyn5XCXSXP//8I1JaEPV3ATNz4o4GdqKnSZNXZ6Wn3Aclh/XCc+zJEb7mvrEkZiQ",
	"/o1diV2fkCZqxQtSwr48+UKBYHv37jPi18uP3+Ifxg+N31el9/AXdibj963Dhg55Sr+TT9qk1Dg3uEJp",
	"bPrnylZQQ3ASOlgS2a5ppOmZXBpP3fv2fdswK5rVJWxuN/8FAAD//z6h/HTwEgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../schemas/CreateProductRequest.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../schemas/Error.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../schemas/Product.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../schemas/UpdateProductRequest.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
