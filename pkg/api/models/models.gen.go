// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateProductRequest defines model for CreateProductRequest.
type CreateProductRequest struct {
	Category    string  `json:"category"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Price       float64 `json:"price"`
	Stock       *int32  `json:"stock,omitempty"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Email openapi_types.Email `json:"email"`
	Name  string              `json:"name"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Status    string    `json:"status"`
	Timestamp time.Time `json:"timestamp"`
}

// Product defines model for Product.
type Product struct {
	Category    string             `json:"category"`
	CreatedAt   time.Time          `json:"createdAt"`
	Description *string            `json:"description,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
	Price       float64            `json:"price"`
	Stock       *int32             `json:"stock,omitempty"`
	UpdatedAt   *time.Time         `json:"updatedAt,omitempty"`
}

// UpdateProductRequest defines model for UpdateProductRequest.
type UpdateProductRequest struct {
	Category    *string  `json:"category,omitempty"`
	Description *string  `json:"description,omitempty"`
	Name        *string  `json:"name,omitempty"`
	Price       *float64 `json:"price,omitempty"`
	Stock       *int32   `json:"stock,omitempty"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	Email *openapi_types.Email `json:"email,omitempty"`
	Name  *string              `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time           `json:"createdAt"`
	Email     openapi_types.Email `json:"email"`
	Id        openapi_types.UUID  `json:"id"`
	Name      string              `json:"name"`
	UpdatedAt *time.Time          `json:"updatedAt,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xUTWsbMRD9K2bOW7NJbnsLpdBCCyElp9LDeDX2qll9ZDQqCcb/vUjr+Gtlx6aF9tCb",
	"vZr35ulp3iyhdcY7S1YCNEsIbUcG88/3TCh0x07FVu7pKVKQ9N2z88SiKVe1KLRw/JJ+G3z+THYhHTRX",
	"dV2B0XbzvwJ58QQNBGFtF7CqQFFoWXvRzo7RdQFg0dBB5fUZfTzrNuPmjg0KNKBcnPUEGalNNNBs29lo",
	"ZsQJF8S1jwmnaI6xl1y14dBWbq7LFNoKLRLHqgKmp6iZFDTfBv2veqqtdd83SDf7Qa2k5oP7D4H4qPVk",
	"UPd79xq+nOfc2y90oP6VPHOVJH9gdlyYEKdy75EoQyHgonR20DkzbOtLvT8S9tLdU/DOBhqLCIISB9ee",
	"0fg+ox9LVok2FASN358YFHqXjuAtm9addolKgte5Oh2okbg2T4W6lXPFjVI2OtdqjytGrU5N0D+Urgqi",
	"V5fZcfBW+arHUrnrdukFH3Lz//txefFOPGLl3152Y1mBSvvs8gxeIP534/hHIrG36k/nIOG1nbshyTsD",
	"C187ZFIThYIT4xT1YTJ3PJGOJrd3n/KClLyH14Vfcg1U8JM4DBRX03pap1s5Txa9hgZupvX0JsUVpQvQ",
	"2Nj3q18BAAD//6syoprFCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
