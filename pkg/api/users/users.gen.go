// Package users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package users

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "oapi-codegen-layout/pkg/api/models"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Email openapi_types.Email `json:"email"`
	Name  string              `json:"name"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	Email *openapi_types.Email `json:"email,omitempty"`
	Name  *string              `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time           `json:"createdAt"`
	Email     openapi_types.Email `json:"email"`
	Id        openapi_types.UUID  `json:"id"`
	Name      string              `json:"name"`
	UpdatedAt *time.Time          `json:"updatedAt,omitempty"`
}

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	// Limit Maximum number of users to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all users
	// (GET /users)
	ListUsers(c *gin.Context, params ListUsersParams)
	// Create a new user
	// (POST /users)
	CreateUser(c *gin.Context)
	// Delete a user
	// (DELETE /users/{userId})
	DeleteUser(c *gin.Context, userId openapi_types.UUID)
	// Get a user by ID
	// (GET /users/{userId})
	GetUserById(c *gin.Context, userId openapi_types.UUID)
	// Update a user
	// (PUT /users/{userId})
	UpdateUser(c *gin.Context, userId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUsers(c, params)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, userId)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserById(c, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/users", wrapper.ListUsers)
	router.POST(options.BaseURL+"/users", wrapper.CreateUser)
	router.DELETE(options.BaseURL+"/users/:userId", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/users/:userId", wrapper.GetUserById)
	router.PUT(options.BaseURL+"/users/:userId", wrapper.UpdateUser)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/jNhD9K8S0RzZSPgosdNttisLAFigK7GmRAyONbS74FXLoRgj03wuSihVbStoA",
	"aWCge7IkDzlv5r15lB6gtdpZg4YCNA8Q2i1qkS9/8SgIvwT0f+JdxEDpofPWoSeJOQS1kCpdrK3XgqAZ",
	"n3Cg3iE0EMhLs4GBgxEaU6QW95/RbGgLzXldc9DS7O9nywYOHu+i9NhB83W/ed7rZh9tb79hSynJr95b",
	"P4fZ2i7nnoHSGILYLP13lDnvMMUv5f7iuhNo1xxWwKWOZG67j3SAJhXwE0mNS4heAV52B3Exyu6lGmd/",
	"xNzKV6A7YiunOxALf1LxnLy0Xpq1Tek6DK2XjqQ10OTuMS2M2KBGQwxN56xMs8KBJCkcYwL7+McKOOzQ",
	"h7Ly/Kw+q1Mx1qERTkIDl2f12SVwcIK2mYUqpqXpaoO51kSRSKlXHTTwWQbKm+c1XmikHP71GOXv4l7q",
	"qJmJ+hY9s2uWN2ZkmUeK3kCqDxq4i+j7x540oKSWBHwc+lL9WkRF0FzUfOq8NHR5keRf8kxSHO/2DZWG",
	"cIMehuEmMRKcNaEI7qKuyyQaQpNrFc4p2eZqq28h1fHwBIgk1Hnhjx7X0MAP1eRT1WhSVdb2JHrhvegL",
	"m4f9SY3cdyUt+PmVaF4CUTxnIevKEHojFAvod+gZjoEcQtRa+P4RmVBqhMaBxCYxDOX+ZuDgbFjQxmTO",
	"ULSPgT7Zrn+zsubuPxyOGfmIw4zl8zcDUMidtzWP5DjNLMS2xRDWUak+EXv1PsTuhJIdk8ZFOik5FdKY",
	"YAb/ypJaUNTAR9+pHtLPqhvK4CsknOvsOj8fdfaiCWVeVtePVpNMbnKakgmO9fPUev7huFhwlKtn/LrU",
	"siSOq/+epozAWGJrG013UuooXDLxnDL48jH0G+ZT6FOfCTwxDdTv4zcdkpAqfFdRlsMoIXbbF7IXDq24",
	"IKTpDfkkdPT2Z+b8E+BfnZnvpOHxrfpEzsz/+xgVrTxvxjk6L18akGvcobIuf5OUKOAQvYIGtkSuqSpl",
	"W6G2NlDzof5QV8LJancOw83wdwAAAP//JYmjg/IPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./schemas/CreateUserRequest.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./schemas/Error.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./schemas/UpdateUserRequest.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./schemas/User.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
