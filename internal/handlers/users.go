package handlers

import (
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	openapi_types "github.com/oapi-codegen/runtime/types"
	"gorm.io/gorm"
	"oapi-codegen-layout/internal/models"
	"oapi-codegen-layout/pkg/api"
)

// UserHandler implements the ServerInterface generated by oapi-codegen
type UserHandler struct {
	db *gorm.DB
}

// NewUserHandler creates a new user handler
func NewUserHandler(db *gorm.DB) *UserHandler {
	return &UserHandler{
		db: db,
	}
}

// GetHealth implements the health check endpoint
// (GET /health)
func (h *UserHandler) GetHealth(c *gin.Context) {
	now := time.Now()
	response := api.HealthResponse{
		Status:    "ok",
		Timestamp: now,
	}
	c.JSON(http.StatusOK, response)
}

// ListUsers returns a list of users
// (GET /users)
func (h *UserHandler) ListUsers(c *gin.Context, params api.ListUsersParams) {
	var dbUsers []models.User

	query := h.db

	// Apply limit if provided
	if params.Limit != nil {
		query = query.Limit(int(*params.Limit))
	}

	if err := query.Find(&dbUsers).Error; err != nil {
		c.JSON(http.StatusInternalServerError, api.Error{
			Code:    "database_error",
			Message: "Failed to retrieve users",
		})
		return
	}

	// Convert database users to API users
	users := make([]api.User, len(dbUsers))
	for i, dbUser := range dbUsers {
		users[i] = dbUserToAPIUser(&dbUser)
	}

	c.JSON(http.StatusOK, users)
}

// CreateUser creates a new user
// (POST /users)
func (h *UserHandler) CreateUser(c *gin.Context) {
	var req api.CreateUserRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, api.Error{
			Code:    "invalid_request",
			Message: err.Error(),
		})
		return
	}

	// Convert API request to database model
	dbUser := apiCreateUserToDBUser(&req)

	// Create user in database
	if err := h.db.Create(dbUser).Error; err != nil {
		c.JSON(http.StatusInternalServerError, api.Error{
			Code:    "database_error",
			Message: "Failed to create user",
		})
		return
	}

	// Convert database model to API model
	user := dbUserToAPIUser(dbUser)

	c.JSON(http.StatusCreated, user)
}

// GetUserById retrieves a user by ID
// (GET /users/{userId})
func (h *UserHandler) GetUserById(c *gin.Context, userId openapi_types.UUID) {
	var dbUser models.User

	// Query user by ID
	if err := h.db.Where("id = ?", uuid.UUID(userId)).First(&dbUser).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			c.JSON(http.StatusNotFound, api.Error{
				Code:    "not_found",
				Message: "User not found",
			})
		} else {
			c.JSON(http.StatusInternalServerError, api.Error{
				Code:    "database_error",
				Message: "Failed to retrieve user",
			})
		}
		return
	}

	// Convert database model to API model
	user := dbUserToAPIUser(&dbUser)

	c.JSON(http.StatusOK, user)
}

// UpdateUser updates an existing user
// (PUT /users/{userId})
func (h *UserHandler) UpdateUser(c *gin.Context, userId openapi_types.UUID) {
	var req api.UpdateUserRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, api.Error{
			Code:    "invalid_request",
			Message: err.Error(),
		})
		return
	}

	var dbUser models.User

	// Query user by ID
	if err := h.db.Where("id = ?", uuid.UUID(userId)).First(&dbUser).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			c.JSON(http.StatusNotFound, api.Error{
				Code:    "not_found",
				Message: "User not found",
			})
		} else {
			c.JSON(http.StatusInternalServerError, api.Error{
				Code:    "database_error",
				Message: "Failed to retrieve user",
			})
		}
		return
	}

	// Update fields if provided
	if req.Email != nil {
		dbUser.Email = string(*req.Email)
	}
	if req.Name != nil {
		dbUser.Name = *req.Name
	}

	// Save updated user
	if err := h.db.Save(&dbUser).Error; err != nil {
		c.JSON(http.StatusInternalServerError, api.Error{
			Code:    "database_error",
			Message: "Failed to update user",
		})
		return
	}

	// Convert database model to API model
	user := dbUserToAPIUser(&dbUser)

	c.JSON(http.StatusOK, user)
}

// DeleteUser deletes a user
// (DELETE /users/{userId})
func (h *UserHandler) DeleteUser(c *gin.Context, userId openapi_types.UUID) {
	var dbUser models.User

	// Query user by ID
	if err := h.db.Where("id = ?", uuid.UUID(userId)).First(&dbUser).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			c.JSON(http.StatusNotFound, api.Error{
				Code:    "not_found",
				Message: "User not found",
			})
		} else {
			c.JSON(http.StatusInternalServerError, api.Error{
				Code:    "database_error",
				Message: "Failed to retrieve user",
			})
		}
		return
	}

	// Delete user (soft delete by default with GORM)
	if err := h.db.Delete(&dbUser).Error; err != nil {
		c.JSON(http.StatusInternalServerError, api.Error{
			Code:    "database_error",
			Message: "Failed to delete user",
		})
		return
	}

	c.Status(http.StatusNoContent)
}

// Helper functions to convert between database models and API models
func dbUserToAPIUser(dbUser *models.User) api.User {
	return api.User{
		Id:        openapi_types.UUID(dbUser.ID),
		Email:     openapi_types.Email(dbUser.Email),
		Name:      dbUser.Name,
		CreatedAt: dbUser.CreatedAt,
		UpdatedAt: &dbUser.UpdatedAt,
	}
}

func apiCreateUserToDBUser(req *api.CreateUserRequest) *models.User {
	return &models.User{
		Email: string(req.Email),
		Name:  req.Name,
	}
}
