package handlers

import (
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	openapi_types "github.com/oapi-codegen/runtime/types"
	"oapi-codegen-layout/pkg/api"
)

// UserHandler implements the ServerInterface generated by oapi-codegen
type UserHandler struct {
	// Add dependencies like database, logger, etc.
}

// NewUserHandler creates a new user handler
func NewUserHandler() *UserHandler {
	return &UserHandler{}
}

// GetHealth implements the health check endpoint
// (GET /health)
func (h *UserHandler) GetHealth(c *gin.Context) {
	now := time.Now()
	response := api.HealthResponse{
		Status:    "ok",
		Timestamp: now,
	}
	c.JSON(http.StatusOK, response)
}

// ListUsers returns a list of users
// (GET /users)
func (h *UserHandler) ListUsers(c *gin.Context, params api.ListUsersParams) {
	// Mock data for demonstration
	users := []api.User{
		{
			Id:        openapi_types.UUID(uuid.New()),
			Email:     "user1@example.com",
			Name:      "User One",
			CreatedAt: time.Now().Add(-24 * time.Hour),
			UpdatedAt: func() *time.Time { t := time.Now(); return &t }(),
		},
		{
			Id:        openapi_types.UUID(uuid.New()),
			Email:     "user2@example.com",
			Name:      "User Two",
			CreatedAt: time.Now().Add(-48 * time.Hour),
			UpdatedAt: func() *time.Time { t := time.Now(); return &t }(),
		},
	}

	// Apply limit if provided
	if params.Limit != nil && int(*params.Limit) < len(users) {
		users = users[:*params.Limit]
	}

	c.JSON(http.StatusOK, users)
}

// CreateUser creates a new user
// (POST /users)
func (h *UserHandler) CreateUser(c *gin.Context) {
	var req api.CreateUserRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, api.Error{
			Code:    "invalid_request",
			Message: err.Error(),
		})
		return
	}

	// Create user (mock implementation)
	user := api.User{
		Id:        openapi_types.UUID(uuid.New()),
		Email:     req.Email,
		Name:      req.Name,
		CreatedAt: time.Now(),
		UpdatedAt: func() *time.Time { t := time.Now(); return &t }(),
	}

	c.JSON(http.StatusCreated, user)
}

// GetUserById retrieves a user by ID
// (GET /users/{userId})
func (h *UserHandler) GetUserById(c *gin.Context, userId openapi_types.UUID) {
	// Mock user retrieval
	user := api.User{
		Id:        userId,
		Email:     "user@example.com",
		Name:      "John Doe",
		CreatedAt: time.Now().Add(-24 * time.Hour),
		UpdatedAt: func() *time.Time { t := time.Now(); return &t }(),
	}

	c.JSON(http.StatusOK, user)
}

// UpdateUser updates an existing user
// (PUT /users/{userId})
func (h *UserHandler) UpdateUser(c *gin.Context, userId openapi_types.UUID) {
	var req api.UpdateUserRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, api.Error{
			Code:    "invalid_request",
			Message: err.Error(),
		})
		return
	}

	// Mock user update
	user := api.User{
		Id:        userId,
		Email:     *req.Email,
		Name:      *req.Name,
		CreatedAt: time.Now().Add(-24 * time.Hour),
		UpdatedAt: func() *time.Time { t := time.Now(); return &t }(),
	}

	c.JSON(http.StatusOK, user)
}

// DeleteUser deletes a user
// (DELETE /users/{userId})
func (h *UserHandler) DeleteUser(c *gin.Context, userId openapi_types.UUID) {
	// Mock user deletion - userId is already validated by the generated middleware
	c.Status(http.StatusNoContent)
}
